{"version":3,"sources":["ContactCard.js","ContactForm.js","App.js","serviceWorker.js","index.js"],"names":["ContactCard","react_default","a","createElement","className","src","this","props","pic","alt","contact","name","email","onClick","onDelete","Component","ContactForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","image","handleChangeName","bind","assertThisInitialized","handleChangeImage","handleChangeEmail","handleFormSubmit","onSubmit","value","onChange","aria-label","type","e","setState","target","preventDefault","formData","onFormSubmit","App","contacts","deleteContact","addContact","_this2","contactCards","map","index","src_ContactCard_0","key","faker","avatar","src_ContactForm","prevState","newArray","slice","push","splice","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f1aba9b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./ContactCard.css\";\n\nclass ContactCard extends Component {\n  render(){\n    return (\n      <div className=\"ContactCard\">\n        <img src={this.props.pic} alt=\"contact avatar pic\"/>\n        <h3 className=\"ContactCard_name\">{this.props.contact.name || \"no name\"}</h3>\n        <p className=\"ContactCard_email\">{this.props.contact.email || \"no email\"}</p>\n        <button className=\"deleteContact contact-btn\" onClick={this.props.onDelete}>Delete</button>\n      </div>\n    );\n  }\n}\n\nexport default ContactCard;","import React, { Component } from 'react';\n\nclass ContactForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: \"grant.png\",\n      name: \"\",\n      email: \"\"\n    }\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleChangeImage = this.handleChangeImage.bind(this);\n    this.handleChangeEmail = this.handleChangeEmail.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n  }\n\n    render() {\n        // Each input has its value controlled by the component state. And when\n        // a user changes the value we update the state to match. It ends up\n        // being a tight two-way sync.\n        return (\n            <form className=\"ContactForm\" onSubmit={this.handleFormSubmit}>\n                <h2>Add A Contact</h2>\n                <p className=\"name-label\">\n                    <label>Name</label>\n                    <input value = {this.state.name} onChange={this.handleChangeName} aria-label=\"name\"/>\n                </p>\n                <p className=\"email-label\">\n                    <label>Email</label>\n                    <input type=\"email\" value = {this.state.email} onChange={this.handleChangeEmail} aria-label=\"email\"/>\n                </p>\n                <p className=\"ContactForm__button-bar button-bar\">\n                    <button className= \"addContact contact-btn\" type=\"submit\">Add</button>\n                </p>\n            </form>  \n        );\n    }\n\n    handleChangeName(e){\n      this.setState({\n        name: e.target.value\n      })\n    }\n\n    handleChangeImage(e){\n      this.setState({\n        image: e.target.value\n      })\n    }\n\n    handleChangeEmail(e){\n      this.setState({\n        email: e.target.value\n      })\n    }\n\n    handleFormSubmit(e){\n      e.preventDefault();\n      const formData = {\n        name: this.state.name,\n        email: this.state.email,\n        image: this.state.image\n      };\n      //this then clears the form onSubmit\n      this.setState({\n        name: \"\",\n        email: \"\"\n      })\n      this.props.onFormSubmit(formData)\n    }\n\n}\n\nexport default ContactForm;","import React, { Component } from 'react';\nimport './ContactCard.css';\nimport ContactCard from \"./ContactCard\";\nimport ContactForm from \"./ContactForm\";\nimport faker from \"faker\";\n//faker brings in profile pictures that randomly generate on refresh...\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //state is always an object\n      contacts: [\n        {\n        name: \"Val\",\n        email: \"val@email.com\"\n      },\n\n       {\n        name: \"Robin\",\n        email: \"robin@email.com\"\n      },\n\n      {\n        name: \"Tracy\",\n        email: \"tracy@email.com\"\n       }\n     ]\n    };\n\n    this.deleteContact = this.deleteContact.bind(this);\n    this.addContact = this.addContact.bind(this);\n\n  }\n\n  render() {\n    const { contacts } = this.state;\n    //One option is to create the array of components first\n      const contactCards = contacts.map((contact, index) =>\n          <ContactCard \n          key = { index } \n          contact = {contact} \n          onDelete={()=>{this.deleteContact(index)}} \n          pic={faker.image.avatar()} />\n        );\n         //Another option is to create the array inline \n    return (\n      <div className=\"App\">\n        <h1 className=\"heading\">Contacts</h1>\n        <ContactForm onFormSubmit={this.addContact}/>\n        <div className=\"cc-container\">\n        <h2>All Contacts:</h2>\n        {contactCards} \n        </div>   \n      </div>\n\n    );\n  }\n\n  addContact(contact) {\n    this.setState(prevState => {\n      const newArray  = prevState.contacts.slice(0);\n      newArray.push(contact);\n      return { contacts: newArray };\n    })\n  }\n\n  deleteContact(index) {\n    this.setState(prevState => {\n      const newArray = prevState.contacts.slice(0);\n      newArray.splice(index, 1);\n      return {\n        contacts: newArray\n      }\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}